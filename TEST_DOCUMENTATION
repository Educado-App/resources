App Name: Educado
Testing Documentation

1. Introduction
  Purpose of Testing Document:
  The purpose of this document is to outline the testing procedures and criteria for the Educado App. It aims to ensure comprehensive testing coverage across various aspects of the application, including functionality, usability, compatibility, performance, and security. This document is a guideline for testers and developers to conduct structured testing and verify the app's readiness for deployment on the Google Play Store.
  Scope of Testing:
  The scope of testing encompasses all the key features and functionalities of the Educado App across multiple devices and Android versions. It includes but is not limited to login functionality, navigation, data processing, user interactions, and security measures. This testing document outlines specific test cases and scenarios to validate the app's behaviour under various conditions.

2. Test Objectives
  * Functional Testing
  * Usability Testing
  * Compatibility Testing
  * Performance Testing
  * Security Testing

3. Test Environment
  Devices:
  * Oneplus 11 (Android 13)
  * Oneplus Nord 2 (Android 13)
  * Motorola 6G (Android 9)
  * Emulators: Pixel 7, Pixel 6a, (Android 13)

4. Test Cases
  4.1 Functional Testing

    Login Routes:
      POST /auth/login
        * Test case x: Should find a user mail without differentiating between upper- and lowercase 
        * Test case x: Returns error if user is not found 
        * Test case x: Returns error if password is incorrect 
        * Test case x: Returns token if user is found and password is correct 
    
    Reset Password Routes:
      POST auth/reset-password-request
        * Test case x: Returns error if email is not found 
        * Test case x: Returns success if email is found and email is sent 
        * Test case x: Returns error if email is not succesfully sent 
        * Test case x: Returns error if reset password attempts > 3 
        * Test case x: Clears reset password attempts after expiration 
        * Test case x: Returns error if token is wrong 

    Signup routes:
      POST auth/signup
        * Test case x: Saves the user in the database 
        * Test case x: Returns error if email is missing 
        * Test case x: Returns error if password is missing 
        * Test case x: Returns error if email does not contain @ and domain 
        * Test case x: Returns error if email is less than 6 characters 
        * Test case x: Returns error if name is missing 
        * Test case x: Returns error if name is out of bounds (1-50) 
        * Test case x: Returns error if name contains illegal symbols
        * Test case x: Test that the password is not stored as plain text 
        * Test case x: Test that emails must be unique when registering

    Student Routes:
      GET /students/:id/subscriptions
        * Test case x: Should get user subscriptions 
        * Test case x: Should handle user not found error 
        * Test case x: Should handle invalid user id

      PATCH /students/:userId
        * Test case x: Update points succesfully
        * Test case x: Update level succesfully
        * Test case x: Handles validation errors for points
        * Test case x: Handles negative value for points
        * Test case x: Handles 0 value for points

      PATCH /students/:userId/completed
        * Test case x: Adds exerciseId to completed exercises correctly 
        * Test case x: Adds two exerciseIds to completed exercises correctly, with different parentCourses 
        * Test case x: Adds two exerciseIds to completed exercises correctly, with same parentCourse 
        * Test case x: First adds an exercise as failed, then completes it 
        * Test case x: Fails to add non-existing exerciseId to completed exercises
        * Test case x: Fails to add exerciseId to completed exercises for non-existing user

    User Routes
      DELETE /users/:userId
        * Test case x: Deletes a user successfully 
        * Test case x: Updates user email successfully 
        * Test case x: Checks that emails must be unique when updating 
        * Test case x: Updates user first name successfully
        * Test case x: Updates user last name successfully 
        * Test case x: Updates user fields successfully
        * Test case x: Handles validation errors for email 
        * Test case x: Handles validation errors for first name

      PATCH /users/:userId
        * Test case x: Should change user credentials 
        * Test case x: Return error if trying to edit password
        * Test case x: Return error if there is an attempt to update an illegal field name 
        * Test case x: Return succesful updated object with new dateUpdated value 
        * Test case x: Return error if email you try to PATCH is identical 
        * Test case x: Return error if firstName you try to PATCH is identical 

      PATCH /api/users/:userId/password
        * Test case x: Should change password 
        * Test case x: Should return error if old password is wrong 
        * Test case x: Should return error if new password is invalid 
        * Test case x: Should return error if new password is missing
        * Test case x: Should return error if id is invalid 
        * Test case x: Should return error if no user is found with the id

    Course Routes:
     GET /courses/:id
        * Test case x: Should get a specific course
        * Test case x: Should handle course not found error
        * Test case x: Should handle invalid course id

      GET /courses/:id/sections
        * Test case x: Should get all sections from a course
        * Test case x: Should handle course not found error
        * Test case x: Should handle invalid course id 

      GET /courses/:courseId/sections/:sectionId
        * Test case x: Should get a specific section
        * Test case x: Should handle course not found error
        * Test case x: Should handle invalid course id
        * Test case x: Should handle section not found error
        * Test case x: Should handle invalid section id

      GET /courses/:id/sections, error handling
        * Test case x: Should handle course does not contain sections
        * Test case x: Should handle sections not found

      POST /courses/:id/subscribe
        * Test case x: Should subscribe a user to a course 
        * Test case x: Should handle user not found error when subscribing
        * Test case x: Should handle invalid user id when subscribing 
        * Test case x: Should handle course not found error when subscribing 
        * Test case x: Should handle invalid course id when subscribing 
        * Test case x: Increments number of subscribers for a course, when subscribing
        * Test case x: Should handle user already subscribed error 

      POST /courses/:id/unsubscribe
        * Test case x: Error when unsubscribing to course with no subscriptions 
        * Test case x: Should handle user not found error when unsubscribing 
        * Test case x: Should handle invalid user id when unsubscribing
        * Test case x: Should handle course not found error when unsubscribing
        * Test case x: Should handle invalid course id when unsubscribing 
        * Test case x: Decrements number of subscribers for a course, when unsubscribing

    Lecture Routes:
      GET /lectures/:lectureId
        * Test case x: Should return a lecture

    Utility Routes:
      GET /utility/online
        * Test case x: Test if online

  4.2 Usability Testing
    Usability tests have been conducted by the intended user. 
    * Test Case x: Check if all text is readable. 
    * Test Case x: Check if all text is translated correctly to Portuguese. 
    * Test Case x: Check if design is intuitive.

  4.3 Compatibility Testing
    * Test Case x: Test app on various screen sizes and resolutions.
    * Test Case x: Ensure compatibility with different Android versions.

  4.4 Performance Testing
    * Test Case x: Assess app response time under varying network conditions.
    * Test Case x: Check memory consumption during prolonged use.

  4.5 Security Testing
    * Test Case x: Validate data encryption during transmission.

5. Test Results
  Summary of test outcomes for each test suite:


      Test Suite                                | Passed Tests
      ------------------------------------------|--------------
      Functional testing:                       |
          Login Routes                          | 4/4
          Reset Password Routes                 | 6/6
          Signup Routes                         | 10/10
          Student Routes                        | 14/14
          Users Routes                          | 20/20
          Course Routes                         | 26/26
          Lecture Routes                        | 1/1
          Utility Routes                        | 1/1
      Usability testing:                        | 3/3
      Compability testing:                      | 2/2
      Performance testing:                      | 2/2
      Security testing:                         | 1/1
      ------------------------------------------|--------------
      Total Tests                               | ../..  


6. Issues and Bug Tracking
  No issues or bugs identifies by now. 

7. Conclusion
  The conclusion is that the app is ready for deployment.
  However, implementing more test and security measures will be priority for furture release. 
